package fr.iut2.tc4.projet.torque;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * Table des notes
 *
 * This class was autogenerated by Torque on:
 *
 * [Thu Dec 16 15:44:26 CET 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Note
 */
public abstract class BaseNote extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1292510666562L;

    /** The Peer class */
    private static final NotePeer peer =
        new NotePeer();


    /** The value for the noteId field */
    private int noteId;

    /** The value for the note field */
    private int note;

    /** The value for the controleId field */
    private int controleId;

    /** The value for the etudiantId field */
    private int etudiantId;


    /**
     * Get the NoteId
     *
     * @return int
     */
    public int getNoteId()
    {
        return noteId;
    }


    /**
     * Set the value of NoteId
     *
     * @param v new value
     */
    public void setNoteId(int v) 
    {

        if (this.noteId != v)
        {
            this.noteId = v;
            setModified(true);
        }


    }

    /**
     * Get the Note
     *
     * @return int
     */
    public int getNote()
    {
        return note;
    }


    /**
     * Set the value of Note
     *
     * @param v new value
     */
    public void setNote(int v) 
    {

        if (this.note != v)
        {
            this.note = v;
            setModified(true);
        }


    }

    /**
     * Get the ControleId
     *
     * @return int
     */
    public int getControleId()
    {
        return controleId;
    }


    /**
     * Set the value of ControleId
     *
     * @param v new value
     */
    public void setControleId(int v) throws TorqueException
    {

        if (this.controleId != v)
        {
            this.controleId = v;
            setModified(true);
        }


        if (aControle != null && !(aControle.getControleId() == v))
        {
            aControle = null;
        }

    }

    /**
     * Get the EtudiantId
     *
     * @return int
     */
    public int getEtudiantId()
    {
        return etudiantId;
    }


    /**
     * Set the value of EtudiantId
     *
     * @param v new value
     */
    public void setEtudiantId(int v) throws TorqueException
    {

        if (this.etudiantId != v)
        {
            this.etudiantId = v;
            setModified(true);
        }


        if (aEtudiant != null && !(aEtudiant.getEtudiantId() == v))
        {
            aEtudiant = null;
        }

    }

    



    private Controle aControle;

    /**
     * Declares an association between this object and a Controle object
     *
     * @param v Controle
     * @throws TorqueException
     */
    public void setControle(Controle v) throws TorqueException
    {
        if (v == null)
        {
            setControleId( 0);
        }
        else
        {
            setControleId(v.getControleId());
        }
        aControle = v;
    }


    /**
     * Returns the associated Controle object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Controle object
     * @throws TorqueException
     */
    public Controle getControle()
        throws TorqueException
    {
        if (aControle == null && (this.controleId != 0))
        {
            aControle = ControlePeer.retrieveByPK(SimpleKey.keyFor(this.controleId));
        }
        return aControle;
    }

    /**
     * Return the associated Controle object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Controle object
     * @throws TorqueException
     */
    public Controle getControle(Connection connection)
        throws TorqueException
    {
        if (aControle == null && (this.controleId != 0))
        {
            aControle = ControlePeer.retrieveByPK(SimpleKey.keyFor(this.controleId), connection);
        }
        return aControle;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setControleKey(ObjectKey key) throws TorqueException
    {

        setControleId(((NumberKey) key).intValue());
    }




    private Etudiant aEtudiant;

    /**
     * Declares an association between this object and a Etudiant object
     *
     * @param v Etudiant
     * @throws TorqueException
     */
    public void setEtudiant(Etudiant v) throws TorqueException
    {
        if (v == null)
        {
            setEtudiantId( 0);
        }
        else
        {
            setEtudiantId(v.getEtudiantId());
        }
        aEtudiant = v;
    }


    /**
     * Returns the associated Etudiant object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Etudiant object
     * @throws TorqueException
     */
    public Etudiant getEtudiant()
        throws TorqueException
    {
        if (aEtudiant == null && (this.etudiantId != 0))
        {
            aEtudiant = EtudiantPeer.retrieveByPK(SimpleKey.keyFor(this.etudiantId));
        }
        return aEtudiant;
    }

    /**
     * Return the associated Etudiant object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Etudiant object
     * @throws TorqueException
     */
    public Etudiant getEtudiant(Connection connection)
        throws TorqueException
    {
        if (aEtudiant == null && (this.etudiantId != 0))
        {
            aEtudiant = EtudiantPeer.retrieveByPK(SimpleKey.keyFor(this.etudiantId), connection);
        }
        return aEtudiant;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setEtudiantKey(ObjectKey key) throws TorqueException
    {

        setEtudiantId(((NumberKey) key).intValue());
    }
   
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("NoteId");
            fieldNames.add("Note");
            fieldNames.add("ControleId");
            fieldNames.add("EtudiantId");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("NoteId"))
        {
            return new Integer(getNoteId());
        }
        if (name.equals("Note"))
        {
            return new Integer(getNote());
        }
        if (name.equals("ControleId"))
        {
            return new Integer(getControleId());
        }
        if (name.equals("EtudiantId"))
        {
            return new Integer(getEtudiantId());
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("NoteId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setNoteId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Note"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setNote(((Integer) value).intValue());
            return true;
        }
        if (name.equals("ControleId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setControleId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("EtudiantId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setEtudiantId(((Integer) value).intValue());
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(NotePeer.NOTE_ID))
        {
            return new Integer(getNoteId());
        }
        if (name.equals(NotePeer.NOTE))
        {
            return new Integer(getNote());
        }
        if (name.equals(NotePeer.CONTROLE_ID))
        {
            return new Integer(getControleId());
        }
        if (name.equals(NotePeer.ETUDIANT_ID))
        {
            return new Integer(getEtudiantId());
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (NotePeer.NOTE_ID.equals(name))
        {
            return setByName("NoteId", value);
        }
      if (NotePeer.NOTE.equals(name))
        {
            return setByName("Note", value);
        }
      if (NotePeer.CONTROLE_ID.equals(name))
        {
            return setByName("ControleId", value);
        }
      if (NotePeer.ETUDIANT_ID.equals(name))
        {
            return setByName("EtudiantId", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Integer(getNoteId());
        }
        if (pos == 1)
        {
            return new Integer(getNote());
        }
        if (pos == 2)
        {
            return new Integer(getControleId());
        }
        if (pos == 3)
        {
            return new Integer(getEtudiantId());
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("NoteId", value);
        }
    if (position == 1)
        {
            return setByName("Note", value);
        }
    if (position == 2)
        {
            return setByName("ControleId", value);
        }
    if (position == 3)
        {
            return setByName("EtudiantId", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(NotePeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    NotePeer.doInsert((Note) this, con);
                    setNew(false);
                }
                else
                {
                    NotePeer.doUpdate((Note) this, con);
                }
            }

            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key noteId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
        setNoteId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
        setNoteId(Integer.parseInt(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getNoteId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Note copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Note copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Note copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Note(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Note copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Note(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Note copyInto(Note copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Note copyInto(Note copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Note copyInto(Note copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setNoteId(noteId);
        copyObj.setNote(note);
        copyObj.setControleId(controleId);
        copyObj.setEtudiantId(etudiantId);

        copyObj.setNoteId( 0);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Note copyInto(Note copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setNoteId(noteId);
        copyObj.setNote(note);
        copyObj.setControleId(controleId);
        copyObj.setEtudiantId(etudiantId);

        copyObj.setNoteId( 0);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public NotePeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return NotePeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Note:\n");
        str.append("NoteId = ")
           .append(getNoteId())
           .append("\n");
        str.append("Note = ")
           .append(getNote())
           .append("\n");
        str.append("ControleId = ")
           .append(getControleId())
           .append("\n");
        str.append("EtudiantId = ")
           .append(getEtudiantId())
           .append("\n");
        return(str.toString());
    }
}

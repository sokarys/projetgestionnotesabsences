package fr.iut2.tc4.projet.torque.map;

import java.util.Date;
import java.math.BigDecimal;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.adapter.DB;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.DatabaseMap;
import org.apache.torque.map.TableMap;
import org.apache.torque.map.ColumnMap;
import org.apache.torque.map.InheritanceMap;

/**
 * Table des controles
 *
  *  This class was autogenerated by Torque on:
  *
  * [Wed Dec 15 15:22:40 CET 2010]
  *
  */
public class ControleMapBuilder implements MapBuilder
{
    /**
     * The name of this class
     */
    public static final String CLASS_NAME =
        "fr.iut2.tc4.projet.torque.map.ControleMapBuilder";

    /**
     * The database map.
     */
    private DatabaseMap dbMap = null;

    /**
     * Tells us if this DatabaseMapBuilder is built so that we
     * don't have to re-build it every time.
     *
     * @return true if this DatabaseMapBuilder is built
     */
    public boolean isBuilt()
    {
        return (dbMap != null);
    }

    /**
     * Gets the databasemap this map builder built.
     *
     * @return the databasemap
     */
    public DatabaseMap getDatabaseMap()
    {
        return this.dbMap;
    }

    /**
     * The doBuild() method builds the DatabaseMap
     *
     * @throws TorqueException
     */
    public synchronized void doBuild() throws TorqueException
    {
        if ( isBuilt() ) {
            return;
        }
        dbMap = Torque.getDatabaseMap("gestion");

        dbMap.addTable("controle");
        TableMap tMap = dbMap.getTable("controle");
        tMap.setJavaName("Controle");
        tMap.setOMClass( fr.iut2.tc4.projet.torque.Controle.class );
        tMap.setPeerClass( fr.iut2.tc4.projet.torque.ControlePeer.class );
        tMap.setDescription("Table des controles");
        tMap.setPrimaryKeyMethod(TableMap.NATIVE);
        DB dbAdapter = Torque.getDB("gestion");
        if (dbAdapter.getIDMethodType().equals(DB.SEQUENCE))
        {
            tMap.setPrimaryKeyMethodInfo("controle_SEQ");
        }
        else if (dbAdapter.getIDMethodType().equals(DB.AUTO_INCREMENT))
        {
            tMap.setPrimaryKeyMethodInfo("controle");
        }

        ColumnMap cMap = null;


  // ------------- Column: controle_id --------------------
        cMap = new ColumnMap( "controle_id", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(true);
        cMap.setNotNull(true);
        cMap.setJavaName( "ControleId" );
        cMap.setAutoIncrement(true);
        cMap.setProtected(false);
        cMap.setDescription("Controle Id");
        cMap.setInheritance("false");
        cMap.setPosition(1);
        tMap.addColumn(cMap);
  // ------------- Column: coef --------------------
        cMap = new ColumnMap( "coef", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "Coef" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("coefficient");
        cMap.setInheritance("false");
        cMap.setPosition(2);
        tMap.addColumn(cMap);
  // ------------- Column: date --------------------
        cMap = new ColumnMap( "date", tMap);
        cMap.setType( new Date() );
        cMap.setTorqueType( "DATE" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "Date" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("date du controle");
        cMap.setInheritance("false");
        cMap.setPosition(3);
        tMap.addColumn(cMap);
  // ------------- Column: note --------------------
        cMap = new ColumnMap( "note", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "Note" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("note du controle");
        cMap.setInheritance("false");
        cMap.setPosition(4);
        tMap.addColumn(cMap);
  // ------------- Column: matiere_id --------------------
        cMap = new ColumnMap( "matiere_id", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "MatiereId" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("Matiere id");
        cMap.setInheritance("false");
        cMap.setForeignKey("matiere", "matiere_id");
        cMap.setPosition(5);
        tMap.addColumn(cMap);
  // ------------- Column: etudiant_id --------------------
        cMap = new ColumnMap( "etudiant_id", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
        cMap.setNotNull(true);
        cMap.setJavaName( "EtudiantId" );
        cMap.setAutoIncrement(false);
        cMap.setProtected(false);
        cMap.setDescription("etudiant id");
        cMap.setInheritance("false");
        cMap.setForeignKey("etudiant", "etudiant_id");
        cMap.setPosition(6);
        tMap.addColumn(cMap);
        tMap.setUseInheritance(false);
    }
}
